C51 COMPILER V9.60.7.0   MAIN                                                              09/01/2024 11:16:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil_c51\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "Config.h"
   2          #include "GPIO.h"
   3          #include "Delay.h"
   4          #include "WS2812B.h"
   5          #include "stdlib.h"
   6          #include "Exti.h"
   7          #include "UART.h"
   8          
   9          #define TOTAL_LIGHT_COUNT 16
  10          
  11          /******************** INT???? ********************/
  12          void  Exti_config(void)
  13          {
  14   1          EXTI_InitTypeDef  Exti_InitStructure;             //??????
  15   1      
  16   1          Exti_InitStructure.EXTI_Mode      = EXT_MODE_RiseFall;//????,   EXT_MODE_RiseFall,EXT_MODE_Fall
  17   1          Ext_Inilize(EXT_INT0, &Exti_InitStructure);       //?????
  18   1          NVIC_INT0_Init(ENABLE, Priority_0);   //?????, ENABLE/DISABLE; ?????(?????) Priority_0,Priority_1,Prior
             -ity_2,Priority_3
  19   1      }
  20          
  21          void UART_config(void) {
  22   1          // >>> ??????? NVIC.c, UART.c, UART_Isr.c <<<
  23   1          COMx_InitDefine   COMx_InitStructure;         //??????
  24   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //??, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UAR
             -T_9bit_BRTx
  25   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //????????????, BRT_Timer1, BRT_Timer2 (???: ????2??
             -????BRT_Timer2)
  26   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //??????, ??? 110 ~ 115200
  27   1          COMx_InitStructure.UART_RxEnable  = ENABLE;       //????????,   ENABLE??DISABLE
  28   1          COMx_InitStructure.BaudRateDouble = DISABLE;      //????????, ENABLE??DISABLE
  29   1          UART_Configuration(UART1, &COMx_InitStructure);   //?????????1 UART1,UART2,UART3,UART4
  30   1      
  31   1          NVIC_UART1_Init(ENABLE,Priority_1);   //?????, ENABLE/DISABLE; ?????(?????) Priority_0,Priority_1,Prior
             -ity_2,Priority_3
  32   1          UART1_SW(UART1_SW_P30_P31);   // ???????, UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P
             -43_P44
  33   1      }
  34          
  35          u8 cur_mode = 0;
  36          u8 pre_mode = 0;
  37          
  38          u8 is_mode_changed() {
  39   1          return cur_mode != pre_mode;
  40   1      }
  41          
  42          void light_on()
  43          {
  44   1          u8 R, G, B;
  45   1          u8 n;
  46   1      
  47   1          // ???????
  48   1          R = 0x56, G = 0x12, B = 0x03;
  49   1      
C51 COMPILER V9.60.7.0   MAIN                                                              09/01/2024 11:16:53 PAGE 2   

  50   1          for (n = 0; n <= TOTAL_LIGHT_COUNT; n++)
  51   1          {
  52   2      
  53   2              // ?????n????
  54   2              //        WS_light_on_range_RGB(0, n, R, G, B);
  55   2      
  56   2              // ??????n????
  57   2              WS_light_on_RGB(n, R, G, B);
  58   2      
  59   2              delay_ms(40);
  60   2      
  61   2              if (is_mode_changed()) {
  62   3                  pre_mode = cur_mode;
  63   3                  break;
  64   3              }
  65   2      
  66   2          }
  67   1      
  68   1          // ???????
  69   1          WS_light_off_all();
  70   1      }
  71          
  72          /**
  73          HSV??????? https://robot.czxy.com/docs/opencv/02_opencv_advance1/02_hsv/
  74          H(hue)        ???  [0, 360)  ???????????????????????? ????????????
  75          S(saturation) ??????0%-100%????????????????????????????????????????????
  76          V(Value??     ????  ??0%-100%?????????????,??????? 5%???????
  77          */
  78          
  79          void light_breathe(double init_value)
  80          {
  81   1          static double step = 2;
  82   1          static double hue = 0.0;
  83   1          static double saturation = 1.0;
  84   1          double value = init_value;
  85   1          u8 n = 100;
  86   1      
  87   1          u8 R, G, B;
  88   1          // ?????????
  89   1          HSVtoRGB(hue, saturation, value, &R, &G, &B);
  90   1      
  91   1          // ?????n????
  92   1          WS_light_on_range_RGB(0, n, R, G, B);
  93   1      
  94   1          delay_ms(5);
  95   1      
  96   1          hue += step;
  97   1          if (hue >= 360)
  98   1          {
  99   2              step = -2;
 100   2          }
 101   1          else if (hue <= 0)
 102   1          {
 103   2              step = 2;
 104   2          }
 105   1      
 106   1              // saturation += (step * 0.01);
 107   1              // if (saturation >= 1.0){
 108   1              //  step = -1;
 109   1              // }else if (saturation <= 0){
 110   1              //  step = 1;
 111   1              // }
C51 COMPILER V9.60.7.0   MAIN                                                              09/01/2024 11:16:53 PAGE 3   

 112   1      
 113   1             value += (step * 0.01);
 114   1             if (value >= 1.0){
 115   2                 step = -1;
 116   2             }
 117   1             else if (value <= 0) {
 118   2                 step = 1;
 119   2             }
 120   1      
 121   1      
 122   1          if (is_mode_changed()) {
 123   2              pre_mode = cur_mode;
 124   2          }
 125   1      }
 126          
 127          void light_shoot(u8 delay)
 128          {
 129   1          static double hue = 0.0;
 130   1          double sat = 1.0;
 131   1          int i = 0;
 132   1      
 133   1          for (i = 0; i < (TOTAL_LIGHT_COUNT); i++)
 134   1          {
 135   2              WS_light_on_flowing_HSV(hue, sat, i, HALF_FORWARD);
 136   2              delay_ms(delay);
 137   2      
 138   2              if (is_mode_changed()) {
 139   3                  pre_mode = cur_mode;
 140   3                  break;
 141   3              }
 142   2          }
 143   1      
 144   1          hue += 20.0;
 145   1      
 146   1          for (i = (TOTAL_LIGHT_COUNT-1); i >=0 ; i--)
 147   1          {
 148   2              WS_light_on_flowing_HSV(hue, sat, i, HALF_BACKWARD);
 149   2              delay_ms(delay);
 150   2      
 151   2              if (is_mode_changed()) {
 152   3                  pre_mode = cur_mode;
 153   3                  break;
 154   3              }
 155   2          }
 156   1      
 157   1          hue += 20.0;
 158   1      
 159   1          if (hue >= 360) {
 160   2              hue = 0;
 161   2          }
 162   1      
 163   1      }
 164          
 165          void light_shoot1(u8 delay)              //?????
 166          {
 167   1          static double hue = 0.0;
 168   1          double sat = 1.0;
 169   1          int i = 0;
 170   1      
 171   1          for (i =  0; i < (TOTAL_LIGHT_COUNT/2); i++)
 172   1          {
 173   2              WS_light_on_flowing_HSV(hue, sat, i, HALF_FORWARD);
C51 COMPILER V9.60.7.0   MAIN                                                              09/01/2024 11:16:53 PAGE 4   

 174   2              delay_ms(delay);
 175   2      
 176   2              if (is_mode_changed()) {
 177   3                  pre_mode = cur_mode;
 178   3                  break;
 179   3              }
 180   2          }
 181   1      
 182   1          hue += 10.0;
 183   1      
 184   1          for (i = (TOTAL_LIGHT_COUNT); i >=(TOTAL_LIGHT_COUNT/2) ; i--)
 185   1          {
 186   2              WS_light_on_flowing_HSV(hue, sat, i, HALF_BACKWARD);
 187   2              delay_ms(delay);
 188   2      
 189   2              if (is_mode_changed()) {
 190   3                  pre_mode = cur_mode;
 191   3                  break;
 192   3              }
 193   2          }
 194   1      
 195   1          hue += 10.0;
 196   1      
 197   1          if (hue >= 360) {
 198   2              hue = 0;
 199   2          }
 200   1      
 201   1      }
 202          
 203          
 204          void ext_int0_call() {
 205   1      
 206   1          if (P32) {
 207   2              ++cur_mode;
 208   2              cur_mode %= 9;
 209   2      
 210   2              printf("cur_mode:%d \n", (int)cur_mode);
 211   2          }
 212   1      
 213   1      }
 214          
 215          void main()
 216          {
 217   1      
 218   1          P3_MODE_IO_PU(GPIO_Pin_2);
 219   1      
 220   1          Exti_config();
 221   1      
 222   1          UART_config();
 223   1      
 224   1          EA = 1;
 225   1      
 226   1          WS_init(TOTAL_LIGHT_COUNT);
 227   1      
 228   1          WS_Send_Reset();
 229   1      
 230   1          while (1)
 231   1          {
 232   2      
 233   2              switch(cur_mode) {
 234   3              case 0:
 235   3                  // light_breathe(0.10);
C51 COMPILER V9.60.7.0   MAIN                                                              09/01/2024 11:16:53 PAGE 5   

 236   3                  WS_light_on_RGB(0, 255, 0, 0);
 237   3                  break;
 238   3              case 1:
 239   3                  // light_breathe(0.20);
 240   3                  WS_light_on_RGB(0, 0, 255, 0);
 241   3                  break;
 242   3              case 2:
 243   3                  // light_breathe(0.40);
 244   3                  WS_light_on_RGB(0, 0, 0, 255);
 245   3                  break;
 246   3              case 3:
 247   3                  light_breathe(0.80);
 248   3                  break;
 249   3              case 4:
 250   3                  light_breathe(1.00);
 251   3                  break;
 252   3              case 5:
 253   3                  light_shoot(20);
 254   3                  break;
 255   3              case 6:
 256   3                  light_shoot1(20);
 257   3                  break;
 258   3              case 7:
 259   3                  light_shoot1(30);
 260   3                  break;
 261   3              case 8:
 262   3                  light_on();
 263   3                  break;
 264   3              default:
 265   3                  light_on();
 266   3                  break;
 267   3              }
 268   2              pre_mode = cur_mode;
 269   2              delay_ms(20);
 270   2          }
 271   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1465    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     22      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
