C51 COMPILER V9.60.7.0   WS2812B                                                           09/01/2024 11:16:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE WS2812B
OBJECT MODULE PLACED IN .\Objects\WS2812B.obj
COMPILER INVOKED BY: D:\keil_c51\C51\BIN\C51.EXE WS2812B.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\WS2812B.lst) TABS(2) OBJECT(.\Objects\WS2812B.obj)

line level    source

   1          #include "WS2812B.h"
   2          #include <math.h>
   3          
   4          u16 total_count;
   5          
   6          void Delay100us(void) //@24.000MHz
   7          {
   8   1          unsigned char data i, j;
   9   1      
  10   1          i = 4;
  11   1          j = 27;
  12   1          do
  13   1          {
  14   2              while (--j);
  15   2          } while (--i);
  16   1      }
  17          
  18          static void GPIO_config(void) {
  19   1          GPIO_InitTypeDef  GPIO_InitStructure;   //结构定义
  20   1          GPIO_InitStructure.Pin  = WS_GPIO_PIN;    //指定要初始化的IO,
  21   1          GPIO_InitStructure.Mode = GPIO_PullUp;  //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPI
             -O_OUT_PP
  22   1          GPIO_Inilize(WS_GPIO, &GPIO_InitStructure);//初始化
  23   1      }
  24          
  25          
  26          #define DALY_300NS()     NOP6()
  27          #define DALY_1080NS()    NOP25()
  28          
  29          //传输0/1的信号
  30          #define   RGB_Send1()     \
  31              RGB_H;                \
  32              DALY_1080NS();        \
  33              RGB_L;                \
  34              DALY_300NS();         \
  35          
  36          #define   RGB_Send0()     \
  37              RGB_H;                \
  38              DALY_300NS();         \
  39              RGB_L;                \
  40              DALY_1080NS();        \
  41          
  42          
  43          
  44          #define SEND_AND_MOVE(c)      \
  45              if ((c) & 0x80){          \
  46                RGB_Send1();            \
  47              }else {                   \
  48                RGB_Send0();            \
  49              }                         \
  50              (c) <<= 1;                \
  51          
  52          
  53          double fmax(double a, double b) {
C51 COMPILER V9.60.7.0   WS2812B                                                           09/01/2024 11:16:54 PAGE 2   

  54   1          return a > b ? a : b;
  55   1      }
  56          
  57          double fmin(double a, double b) {
  58   1          return a < b ? a : b;
  59   1      }
  60          
  61          /**
  62          
  63          HSV颜色模式： https://robot.czxy.com/docs/opencv/02_opencv_advance1/02_hsv/
  64          H(hue)        色相   [0, 360)  色彩的相貌或者图像的颜色，比如 红橙黄绿青蓝紫
  65          S(saturation) 饱和度（0%-100%）颜色的深浅、浓度、鲜艳程度。如红色可以分为深红、洋红、浅红等。
  66          V(Value）     明度  （0%-100%）表示颜色的强度,明暗度。
  67          */
  68          void HSVtoRGB(double h, double s, double v, u8* r, u8* g, u8* b) {
  69   1          double r1, g1, b1;
  70   1      
  71   1          double c = v * s;
  72   1          double x = c * (1 - fabs(fmod(h / 60.0, 2) - 1));
  73   1          double m = v - c;
  74   1      
  75   1          h = fmod(h, 360.0); // Ensure h is in the range [0, 360)
  76   1          s = fmax(0.0, fmin(1.0, s)); // Clamp s to [0, 1]
  77   1          v = fmax(0.0, fmin(1.0, v)); // Clamp v to [0, 1]
  78   1      
  79   1      
  80   1          if (h >= 0 && h < 60) {
  81   2              r1 = c, g1 = x, b1 = 0;
  82   2          } else if (h >= 60 && h < 120) {
  83   2              r1 = x, g1 = c, b1 = 0;
  84   2          } else if (h >= 120 && h < 180) {
  85   2              r1 = 0, g1 = c, b1 = x;
  86   2          } else if (h >= 180 && h < 240) {
  87   2              r1 = 0, g1 = x, b1 = c;
  88   2          } else if (h >= 240 && h < 300) {
  89   2              r1 = x, g1 = 0, b1 = c;
  90   2          } else {
  91   2              r1 = c, g1 = 0, b1 = x;
  92   2          }
  93   1      
  94   1          *r = (u8)((r1 + m) * 255);
  95   1          *g = (u8)((g1 + m) * 255);
  96   1          *b = (u8)((b1 + m) * 255);
  97   1      }
  98          
  99          void HSVtoRGB24(double h, double s, double v, u32* rgb) {
 100   1          u8 r, g, b;
 101   1          HSVtoRGB(h, s, v, &r, &g, &b);
 102   1          *rgb = ((u32)r << 16) | ((u32)g << 8) | b;
 103   1      }
 104          
 105          //初始化
 106          void WS_init(u16 count) {
 107   1          GPIO_config();
 108   1          total_count = count;
 109   1      }
 110          
 111          //点亮第一个灯
 112          void WS_Send_RGB(u8 R, u8 G, u8 B) {
 113   1      
 114   1          SEND_AND_MOVE(G);
 115   1          SEND_AND_MOVE(G);
C51 COMPILER V9.60.7.0   WS2812B                                                           09/01/2024 11:16:54 PAGE 3   

 116   1          SEND_AND_MOVE(G);
 117   1          SEND_AND_MOVE(G);
 118   1          SEND_AND_MOVE(G);
 119   1          SEND_AND_MOVE(G);
 120   1          SEND_AND_MOVE(G);
 121   1          SEND_AND_MOVE(G);
 122   1      
 123   1      
 124   1          SEND_AND_MOVE(R);
 125   1          SEND_AND_MOVE(R);
 126   1          SEND_AND_MOVE(R);
 127   1          SEND_AND_MOVE(R);
 128   1          SEND_AND_MOVE(R);
 129   1          SEND_AND_MOVE(R);
 130   1          SEND_AND_MOVE(R);
 131   1          SEND_AND_MOVE(R);
 132   1      
 133   1      
 134   1          SEND_AND_MOVE(B);
 135   1          SEND_AND_MOVE(B);
 136   1          SEND_AND_MOVE(B);
 137   1          SEND_AND_MOVE(B);
 138   1          SEND_AND_MOVE(B);
 139   1          SEND_AND_MOVE(B);
 140   1          SEND_AND_MOVE(B);
 141   1          SEND_AND_MOVE(B);
 142   1      }
 143          
 144          //点亮指定开始结束位置的灯
 145          void WS_light_on_range_RGB(u16 start,u16 end, u8 R, u8 G, u8 B) {
 146   1          int i;
 147   1          for(i = 0; i < total_count; i++) {
 148   2              if( i >= start && i < end ) {
 149   3                  WS_Send_RGB(R, G, B);
 150   3              } else {
 151   3                  WS_Send_RGB(0, 0, 0);
 152   3              }
 153   2          }
 154   1          WS_Send_Reset();
 155   1      }
 156          
 157          
 158          //点亮第N个灯
 159          void WS_light_on_RGB(u16 n, u8 R, u8 G, u8 B) {
 160   1          int i;
 161   1          for(i = 0; i < total_count; i++) {
 162   2              if( i == n ) {
 163   3                  WS_Send_RGB(R, G, B);
 164   3              } else {
 165   3                  WS_Send_RGB(0, 0, 0);
 166   3              }
 167   2          }
 168   1          WS_Send_Reset();
 169   1      }
 170          #define PI  3.14159265
 171          
 172          #define EXCHANGE_FUNC(input)  (1 - cos(input * PI * 0.5))
 173          
 174          /**
 175           * 
 176          流水灯：
 177          指定颜色，饱和度，
C51 COMPILER V9.60.7.0   WS2812B                                                           09/01/2024 11:16:54 PAGE 4   

 178          指定宽度，指定模式
 179          */
 180          void WS_light_on_flowing_HSV(
 181            double hue, double sat, 
 182              u16 pos, 
 183            FLOWING_MODE mode // 0为单向前进，1位单向回流, 2为双向前进，3为双向回流
 184          ){
 185   1          int i = 0, start_i, end_i;
 186   1          u32 color;
 187   1          int width = FLOWING_WIDTH;
 188   1        // 根据mode和width算出hsv并转成RGB存到数组
 189   1          u32 arr[FLOWING_WIDTH] = {0}; // 动态分配数组内存空间
 190   1      
 191   1          if (mode == HALF_FORWARD) {
 192   2              // -->>O--------------------
 193   2              for (i = 0; i < width; i++) { // 0.1, 0.2, 0.3, 0.4...1.0
 194   3                  HSVtoRGB24(hue, sat, EXCHANGE_FUNC(i * 1.0 / width), &arr[i]);
 195   3              }
 196   2              start_i = pos - width + 1;
 197   2              end_i = pos;
 198   2          }else if ( mode == HALF_BACKWARD) {
 199   2            
 200   2              // -------------------O<<--
 201   2              for (i = 0; i < width; i++) { // 1.0, 0.9, 0.8, 0.7...0.1
 202   3                  HSVtoRGB24(hue, sat, EXCHANGE_FUNC(i * 1.0 / width), &arr[width - i - 1]);
 203   3              }
 204   2              start_i = pos;
 205   2              end_i = pos + width - 1;
 206   2      
 207   2          }else if ( mode == FULL) { // 9 -> 4, 8 -> 4, 7 -> 3
 208   2              // -->>O<<--------------
 209   2              int half_index = width / 2;
 210   2              for (i = 0; i < half_index; i++) {
 211   3                  HSVtoRGB24(hue, sat, EXCHANGE_FUNC(i * 1.0 / width), &arr[i]);
 212   3              }
 213   2              for (i = half_index; i < width; i++) {
 214   3                  HSVtoRGB24(hue, sat, EXCHANGE_FUNC(i * 1.0 / width), &arr[width - i - 1]);
 215   3              }
 216   2              start_i = pos - half_index;
 217   2              end_i = pos + half_index;
 218   2          }
 219   1      
 220   1        // 循环发送
 221   1          for(i = 0; i < total_count; i++) {
 222   2              if( i >= start_i && i <= end_i ) {
 223   3                  color = arr[i - start_i];
 224   3      //            color = 0xFF00FF;
 225   3                  WS_Send_RGB((color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF);
 226   3                  // WS_Send_RGB(R, G, B);
 227   3              } else {
 228   3                  WS_Send_RGB(0, 0, 0);
 229   3              }
 230   2          }
 231   1      
 232   1          WS_Send_Reset();
 233   1        // Reset
 234   1      //    free(arr); // 释放动态分配的内存
 235   1      }
 236          
 237          //结束 >= 50ms 的拉低
 238          void WS_Send_Reset() {
 239   1          RGB_L;
C51 COMPILER V9.60.7.0   WS2812B                                                           09/01/2024 11:16:54 PAGE 5   

 240   1          Delay100us();
 241   1      }
 242          
 243          
 244          void WS_light_off_all() {
 245   1          u16 cnt = total_count;
 246   1          while(cnt--) {
 247   2              WS_Send_RGB(0, 0, 0);
 248   2          }
 249   1          WS_Send_Reset();
 250   1      }
 251          
 252          
 253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4488    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =      2     206
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
